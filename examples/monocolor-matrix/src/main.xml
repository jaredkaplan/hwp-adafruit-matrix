<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

    <require id="AdafruitMatrix" path="AdafruitMatrix" />
    
    <!-- The main container template -->
    <container id="MainContainer" top="0" left="0" bottom="0" right="0">
        <skin color="white"/>
        <label name="info" string="'Moving Dots'">
            <style font="24px Arial" color="black"/>
        </label>
    </container>

    <script>
        <![CDATA[
            // create a new MonoColorMatrix instance and specify the
            // I2C data and clock pins on the device
            var matrix = new AdafruitMatrix.MonoColorMatrix( 27, 29 );

            // initialize the matrix
            matrix.init();

            // add the main container to the application
            application.add( new MainContainer() );

            // start the animation
            application.invoke( new Message( "/animate" ) );
        ]]>
    </script>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Animate handler animates a dot across the matrix display -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <handler path="/animate">
        <behavior>
            <field id="cur" value="0"/>
            <field id="p" />
            <method id="onInvoke" params="handler, message">
                <![CDATA[
                    // if there was a previously set pixel then unset it
                    if( this.p != null )
                        matrix.display.setPixel( this.p.x, this.p.y, AdafruitMatrix.OFF );
                    else
                        this.p = new Object();

                    // save the current pixel info
                    this.p.x = this.cur % matrix.display.width;        
                    this.p.y = Math.floor( this.cur / matrix.display.width );

                    // set the pixel state in the display
                    matrix.display.setPixel( this.p.x, this.p.y, AdafruitMatrix.ON );

                    // wrap the pixel index if we are iterating over the last pixel
                    if( this.cur < ((matrix.display.width * matrix.display.height) - 1) )
                        this.cur++;
                    else
                        this.cur = 0;

                    // update the matrix display
                    matrix.draw();

                    // invoke the wait handler
                    handler.invoke( new Message( "/delay?duration=100&cb=/animate" ) );
                ]]>
            </method>
        </behavior>
    </handler>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Tell the handler to wait before calling the specified handler   -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <handler path="/delay">
        <behavior>
            <method id="onInvoke" params="handler, message">
                <![CDATA[
                    var query = parseQuery( message.query );
                    var duration = query.duration;

                    handler.wait( duration )
                ]]>
            </method>
            <method id="onComplete" params="handler, message">
                <![CDATA[
                    var query = parseQuery( handler.message.query );
                    var cb = query.cb;

                    handler.invoke( new Message( cb ) );
                ]]>
            </method>
        </behavior>
    </handler>

</program>